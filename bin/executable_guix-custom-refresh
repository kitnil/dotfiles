#!/usr/bin/env bash

trap "git restore guix/upstream.scm" EXIT

patch_guix_upstream()
{
    if [[ $(git diff guix/upstream.scm) == "" ]]
    then
        patch --strip=1 <<'EOF'
diff --git a/guix/upstream.scm b/guix/upstream.scm
index 6584d5e4c4..ea94184961 100644
--- a/guix/upstream.scm
+++ b/guix/upstream.scm
@@ -24,6 +24,7 @@
   #:use-module (guix discovery)
   #:use-module ((guix download)
                 #:select (download-to-store url-fetch))
+  #:use-module (guix git-download)
   #:use-module (guix gnupg)
   #:use-module (guix packages)
   #:use-module (guix diagnostics)
@@ -400,7 +401,8 @@ SOURCE, an <upstream-source>."
 
 (define %method-updates
   ;; Mapping of origin methods to source update procedures.
-  `((,url-fetch . ,package-update/url-fetch)))
+  `((,url-fetch . ,package-update/url-fetch)
+    (,git-fetch . ,package-update/url-fetch)))
 
 (define* (package-update store package updaters
                          #:key (key-download 'interactive))
EOF
    fi
}

log_packages_for_upgrade()
{
    if ! [ -e refresh.log ]
    then
        printf "No refresh.log exists, creating...\n"
        ./pre-inst-env guix refresh "$(./pre-inst-env guix maintainer)" |& tee refresh.log
    fi
}

upgrade_package()
{
    printf 'Updating "%s" package and remember version.\n' "$package"
    version="$(./pre-inst-env guix refresh --update "$package" |& awk '/updating from version/ { print $NF }' | sed 's/\.\.\.//')"
    if [ -z "$version" ]
    then
        printf "No version found.\n"
        exit 1
    fi

    file="$(git diff --stat | awk '/packages/ { print $1 }')"
    printf 'Trying to build "%s" package.\n' "$package"
    mapfile -t hashes < <(./pre-inst-env guix build "$package" |& awk '/hash:/ { print $NF }')
    if [ "${#hashes[@]}" -ne 0 ]
    then
        if grep --quiet "${hashes[0]}" "$file"
        then
            if git diff "$file" | grep --quiet '(version' 
            then
                printf 'Substitute "%s" with "%s" in "%s".\n' "${hashes[0]}" "${hashes[1]}" "$file"
                if sed --in-place "s/${hashes[0]}/${hashes[1]}/" "$file"
                then
                    printf "Building package again..."
                    if ./pre-inst-env guix build "$package"
                    then
                        sed --in-place "/$package/d" refresh.log
                    fi
                fi
            else
                git restore "$file"
                printf '\033[31merror: Failed to update "%s" package. Restoring "%s" file.\033[0m\n' "$package" "$file"
                exit 1
            fi
        fi
    fi
    if [[ $(git diff "$file") == "" ]]
    then
        printf '\033[31merror: Nothing to commit.\033[0m\n'
        exit 1
    else
        git commit --message="$(printf "gnu: $package: Update to $version.\n\n* $file ($package): Update to $version.")" "$file"
        printf '\033[32mCommit the change in "%s" file.\033[0m\n' "$file"
        git show
    fi
}

main()
{
    patch_guix_upstream
    log_packages_for_upgrade
    select package in $(awk '/would be upgraded/ { print $2 }' refresh.log)
    do
        upgrade_package "$package"
    done
}

main # Entry point
