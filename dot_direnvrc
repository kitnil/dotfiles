export_function()
{
  local name=$1
  local alias_dir=$PWD/.direnv/aliases
  mkdir -p "$alias_dir"
  PATH_add "$alias_dir"
  local target="$alias_dir/$name"
  if declare -f "$name" >/dev/null; then
    echo "#!$SHELL" > "$target"
    declare -f "$name" >> "$target" 2>/dev/null
    # Notice that we add shell variables to the function trigger.
    echo "$name \$*" >> "$target"
    chmod +x "$target"
  fi
}

use_haunt()
{
    gcroot="${HOME}/.config/guix/gcroots/haunt"
    if [ -L "$gcroot" ]
    then
        rm -v "$gcroot"
    fi
    PACKAGES_MAINTENANCE=(direnv git sshpass password-store less openssh gnupg)
    PACKAGES=(bash coreutils grep findutils which)
    eval "$(guix environment --search-paths --root="$gcroot" --pure --load=guix.scm --ad-hoc ${PACKAGES[@]} ${PACKAGES_MAINTENANCE[@]} "$@")"
}

use_guix()
{
    export GUIX_GITHUB_TOKEN="$(pass show github/tokens/GUIX_GITHUB_TOKEN)"
    export GUIX_PACKAGE_PATH=""

    gcroot="${HOME}/.config/guix/gcroots/guix"
    if [ -L "$gcroot" ]
    then
        rm -v "$gcroot"
    fi

    PACKAGES_MAINTENANCE=(direnv git sshpass password-store less openssh gnupg xdot guile-readline guile-colorized ncurses git-cal)
    PACKAGES=(help2man guile-sqlite3 guile-gcrypt)

    # https://lists.gnu.org/archive/html/guix-devel/2016-09/msg00859.html
    eval "$(guix environment --search-paths --root="$gcroot" --pure guix --ad-hoc ${PACKAGES[@]} ${PACKAGES_MAINTENANCE[@]} "$@")"

    configure()
    {
        ./configure --localstatedir=/var --prefix=
    }
    export_function configure

    build()
    {
        make -j 2
        if [ $# -gt 0 ]
        then
            case "$1" in
                refresh)
                    ./pre-inst-env guix refresh -l "${@:2}"                             \
                        | cut -d: -f 2                                                  \
                        | tr ' ' '\n'                                                   \
                        | cut -d@ -f 1                                                  \
                        | xargs ./pre-inst-env guix build --no-grafts --no-offload
                    ;;
                *)
                    ./pre-inst-env guix build --no-grafts --no-offload "$@"
                    ;;
            esac
        fi
    }
    export_function build

    push()
    {
        sshpass -Ppassphrase -p"$(pass show localhost/ssh/id_rsa_savannah)" git push --set-upstream origin
    }
    export_function push

    clear
    git-cal --author='Oleg Pykhalov'
    echo "
build     build a package or just a project if no argument provided
configure run ./configure with predefined parameters
push      push to upstream Git repository
"
}

use_emacs-guix()
{
    gcroot="${HOME}/.config/guix/gcroots/guix"
    if [ -L "$gcroot" ]
    then
        rm -v "$gcroot"
    fi

    PACKAGES_MAINTENANCE=(direnv git sshpass password-store less openssh gnupg xdot guile-readline guile-colorized ncurses git-cal)
    PACKAGES=(help2man)

    # https://lists.gnu.org/archive/html/guix-devel/2016-09/msg00859.html
    eval "$(guix environment --search-paths --root="$gcroot" --pure --load=guix.scm --ad-hoc ${PACKAGES[@]} ${PACKAGES_MAINTENANCE[@]} "$@")"
}

use_dotfiles()
{
    check()
    {
        make check TESTS="tests/connect.bats tests/executables.bats tests/mail.bats tests/majordomo.bats" "$@"
    }
    export_function check
}
