# -- Roll out cilium agent pods automatically when configmap is updated.
rollOutCiliumPods: true

cni:
  # https://github.com/cilium/cilium/pull/14192/files
  # make Cilium's CNI conf the only one available by aanm · Pull Request
  # #14192 · cilium/cilium
  #
  # Make Cilium take ownership over the `/etc/cni/net.d` directory on the
  # node, renaming all non-Cilium CNI configurations to
  # `*.cilium_bak`. This ensures no Pods can be scheduled using other CNI
  # plugins during Cilium agent downtime.
  #
  # Do not rename 00-multus.conf to 00-multus.conf.cilium_bak file in
  # /etc/cni/net.d directory.
  exclusive: false
  #
  # Enable debug logging
  debug:
    enabled: true

prometheus:
  enabled: true

operator:
  replicas: 1
  rollOutPods: true
  prometheus:
    enabled: true

# -- Configure the kube-proxy replacement in Cilium BPF datapath
# Valid options are "disabled", "probe", "partial", "strict".
# ref: https://docs.cilium.io/en/stable/gettingstarted/kubeproxy-free/
kubeProxyReplacement: "strict"

k8sServiceHost: "192.168.25.10"
k8sServicePort: "6443"

bpf:
  masquerade: true

  # -- Configure explicitly allowed VLAN id's for bpf logic bypass.
  # [0] will allow all VLAN id's without any filtering.
  vlanBypass: [0]

  # -- Allow cluster external access to ClusterIP services.
  #
  # Required for access to Kubernetes ClusterIP services from Kubevirt virtual
  # machines with interface type masquerade.
  lbExternalClusterIP: true

# -- Configure BGP
bgp:
  # -- Enable BGP support inside Cilium; embeds a new ConfigMap for BGP inside
  # cilium-agent and cilium-operator
  enabled: true
  announce:
    # -- Enable allocation and announcement of service LoadBalancer IPs
    loadbalancerIP: true

ipam:
  mode: "kubernetes"

# -- This feature set enables virtual BGP routers to be created via
# CiliumBGPPeeringPolicy CRDs.
bgpControlPlane:
  # -- Enables the BGP control plane.
  enabled: true

ingressController:
  enabled: true

hubble:
  relay:
    rollOutPods: true
    enabled: true
  ui:
    rollOutPods: true
    enabled: true

# Optimize TCP and UDP workloads and enable rate-limiting traffic from
# individual Pods with EDT (Earliest Departure Time) through the
# "kubernetes.io/egress-bandwidth" Pod annotation.
bandwidthManager:
  enabled: true
  bbr: false # Linux kernel of 5.18

cluster:
  name: "cluster1"
  id: 1

# -- Configure external workloads support
externalWorkloads:
  # -- Enable support for external workloads, such as VMs (false by default).
  #
  # Required for cluster-mesh.
  enabled: true

# Kubernetes Without kube-proxy — Cilium 1.9.18 documentation
# https://docs.cilium.io/en/v1.9/gettingstarted/kubeproxy-free/#hybrid-mode
#
# Cilium also supports a hybrid DSR and SNAT mode, that is, DSR is performed
# for TCP and SNAT for UDP connections. This has the advantage that it removes
# the need for manual MTU changes in the network while still benefiting from
# the latency improvements through the removed extra hop for replies, in
# particular, when TCP is the main transport for workloads.
#
# The mode setting `loadBalancer.mode` allows to control the behavior through
# the options `dsr`, `snat` and `hybrid`. By default the `snat` mode is used
# in the agent.
loadBalancer:
  mode: hybrid

tunnel: "disabled" # required for loadBalancer.mode=hybrid

# -- Enable installation of PodCIDR routes between worker
# nodes if worker nodes share a common L2 network segment.
autoDirectNodeRoutes: true
