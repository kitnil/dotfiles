k8sServiceHost: "201:c18b:10f7:a21:ac2c:cc10:f3e:64e6"
k8sServicePort: "6443"

# -- This feature set enables virtual BGP routers to be created via
# CiliumBGPPeeringPolicy CRDs.
bgpControlPlane:
  # -- Enables the BGP control plane.
  enabled: true

# -- Configure BGP
bgp:
  # -- Enable BGP support inside Cilium; embeds a new ConfigMap for BGP inside
  # cilium-agent and cilium-operator
  enabled: true
  announce:
    # -- Enable allocation and announcement of service LoadBalancer IPs
    loadbalancerIP: true

cluster:
  name: "cluster2"
  id: 2

ipv4NativeRoutingCIDR: 10.42.0.0/16

# Node IPAM LoadBalancer is a feature inspired by k3s “ServiceLB” that allows
# you to “advertise” the node’s IPs directly inside a Service
# LoadBalancer. This feature is especially useful if you don’t control the
# network you are running on and can’t use either the L2 or BGP capabilities
# of Cilium.
#
# It works by getting the Node addresses of the selected pods and advertising
# them. It will respect the .spec.ipFamilies to decide if IPv4 or IPv6
# addresses shall be used and will use the ExternalIP addresses if any or the
# InternalIP addresses otherwise.
#
# To use this feature your service must be of type LoadBalancer and have the
# loadBalancerClass set to io.cilium/node.
nodeIPAM:
  enabled: true
