(defconst wi-c--prettify-symbols-alist
  `((" % " . (? (Br . Bl) ?m
                (Br . Bl) ?o
                (Br . Bl) ?d
                (Br . Bl) ? ))
    (" * " . (? (Br . Bl) ?¬∑
                (Br . Bl) ? ))
    (" / " . (? (Br . Bl) ?√∑
                (Br . Bl) ? ))
    ("!" . ?¬¨)
    ("!=" . ?‚â¢)
    ("&&" . ?‚àß)
    ("->" . (?  (Br . Bl) ?‚Üí
                (Br . Bl) ? ))
    ("<=" . ?‚â§)
    ("==" . ?‚â°)
    (">=" . ?‚â•)
    ("NULL" . ?N)
    ("false" . ?F)
    ("float" . ?‚Ñö)
    ("int" . ?‚Ñ§)
    ("rand" . ?ùîº)
    ("true" . ?T)
    ("uint32_t" . (?‚Ñï (Br . Bl) ?‚ÇÉ
                      (Br . Bl) ?‚ÇÇ))
    ("uint8_t" . (?‚Ñï (Br . Bl) ?‚Çà))
    ("Uint32" . ,(string-to-symbols "‚Ñï‚ÇÉ‚ÇÇ"))
    ("Uint8" . ,(string-to-symbols "‚Ñï‚Çà"))
    ("union" . ?‚à™)
    ("void" . ?√ò)
    ("x_1" . (?x (Br . Bl) ?‚ÇÅ))
    ("x_2" . (?x (Br . Bl) ?‚ÇÇ))
    ("y_1" . (?y (Br . Bl) ?‚ÇÅ))
    ("y_2" . (?y (Br . Bl) ?‚ÇÇ))
    ("||" . ?‚à®)))

(add-hook 'c-mode-hook 'prettify-symbols-mode)
(add-hook 'c-mode-hook
          (lambda ()
            (set (make-local-variable 'prettify-symbols-alist)
                 wi-c--prettify-symbols-alist)))

(with-eval-after-load 'c-mode
  (let ((map c-mode-map))
    (define-key map (kbd "M-.") 'dumb-jump-go)))

(with-eval-after-load 'cc-vars
  (setq-default c-cleanup-list '(space-before-funcall scope-operator)))

(with-eval-after-load 'semantic
  (global-semantic-decoration-mode t))

(defconst wi-asm-mode--prettify-symbols-alist
  `(("%eax" . ,(string-to-symbols "%eax (‚Ñï‚ÇÉ‚ÇÇ)"))
    ("%edi" . ,(string-to-symbols "%edi (‚Ñï‚ÇÉ‚ÇÇ)"))
    ("%rbp" . ,(string-to-symbols "%rbp (base‚Üí)"))
    ("%rsp" . ,(string-to-symbols "%rsp (stack‚Üí)"))
    ("$0x0" . (?0))))

(add-hook 'asm-mode-hook 'prettify-symbols-mode)
(add-hook 'asm-mode-hook
          (lambda ()
            (set (make-local-variable 'prettify-symbols-alist)
                 wi-asm-mode--prettify-symbols-alist)))

(setq disaster-cc "gcc")
