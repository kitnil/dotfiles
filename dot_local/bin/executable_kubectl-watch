#!/usr/bin/env bash

if [[ -z "$1" ]]
then
    viddy -n "${KUBECTL_WATCH_INTERVAL:-10}" "kubectl get nodes -o wide; echo; kubectl get all -A -o wide; echo; kubectl get ingress -o wide; echo; kubectl get secrets -o wide; echo; kubectl get all -n kube-system -A -o wide"
else
    namespace="$1"
    export namespace
    viddy_command()
    {
        case "$namespace" in
            pdns)
                kustomization="powerdns"
                ;;
            kube-system)
                kustomization="cilium"
                ;;
            *)
                kustomization="$namespace"
                ;;
        esac
        if [[ $(kubectl get -n "$namespace" scaledobjects) != *"No resources found"* ]]
        then
            cat <<EOF
$ kubectl get -n "$namespace" scaledobjects
$(kubectl get -n "$namespace" scaledobjects)

EOF
        fi
        case "$KUBECONFIG" in
            *config-mjru-*)
                cat <<EOF
$ git ls-remote https://gitlab.corp1.majordomo.ru/cd/fluxcd.git master
$(git ls-remote https://gitlab.corp1.majordomo.ru/cd/fluxcd.git master)

EOF
                ;;
            *config-home-*)
                cat <<EOF
$ git ls-remote https://gitlab.com/wigust/dotfiles.git master
$(git ls-remote https://gitlab.com/wigust/dotfiles.git master)

EOF
                PROMETHEUS_URL=https://prometheus.kubernetes.home.wugi.info
                if kubectl get -n "$namespace" scaledobjects &> /dev/null
                then
                    mapfile -t queries < <(kubectl get -n "$namespace" scaledobjects "${namespace}-scaledobject" -o json | jq --raw-output '.spec.triggers[] | .metadata.query')
                    for query in "${queries[@]}"
                    do
                        cat <<EOF
query: ${query}
$(echo "$query" | curl --silent --get "${PROMETHEUS_URL}/api/v1/query" --data-urlencode query@-)

EOF
                    done
                fi
                ;;
        esac
        cat <<EOF
$ kubectl get -n flux-system gitrepositories.source.toolkit.fluxcd.io flux-system
$(kubectl get -n flux-system gitrepositories.source.toolkit.fluxcd.io flux-system)

EOF
        if kubectl get -n flux-system kustomizations.kustomize.toolkit.fluxcd.io "$kustomization" &> /dev/null
        then
            cat <<EOF
$ kubectl get -n flux-system kustomizations.kustomize.toolkit.fluxcd.io "$kustomization"
$(kubectl get -n flux-system kustomizations.kustomize.toolkit.fluxcd.io "$kustomization")

EOF
        fi
        mapfile -t helmreleases < <(kubectl -n "$namespace" get helmreleases.helm.toolkit.fluxcd.io --no-headers=true --output=custom-columns='NAME:metadata.name')
        for helmrelease in "${helmreleases[@]}"
        do
            if kubectl -n "$namespace" get helmreleases.helm.toolkit.fluxcd.io "$helmrelease" &> /dev/null
            then
                cat <<EOF
$ kubectl -n "$namespace" get helmreleases.helm.toolkit.fluxcd.io "$helmrelease"
$(kubectl -n "$namespace" get helmreleases.helm.toolkit.fluxcd.io "$helmrelease")

EOF
            fi
        done
        if [[ $namespace == "kube-system" ]]
        then
            mapfile -t nodes_with_noschedule_taint < <(kubectl get nodes -o go-template='{{range $item := .items}}{{with $nodename := $item.metadata.name}}{{range $taint := $item.spec.taints}}{{if and (eq $taint.effect "NoSchedule")}}{{printf "%s\n" $nodename}}{{end}}{{end}}{{end}}{{end}}' | sort --version-sort)
            nodes_with_noschedule()
            {
                for node in "${nodes_with_noschedule_taint[@]}"
                do
                    echo -n "${node}: "
                    kubectl get node -o json "$node" \
                        | jq --monochrome-output --compact-output '.metadata.labels | with_entries(select(.key | test("^.*cluster.local.*$"))) | with_entries(select(.value == "false")) | keys'
                done
            }
            cat <<EOF
$ kubectl get nodes -o wide
$(kubectl get node -o wide | awk 'NR<3{print $0;next}{print $0| "sort --version-sort"}')

$ kubectl get nodes ... # with NoSchedule taint
$(nodes_with_noschedule)

$ kubectl top node
$(kubectl top node | awk 'NR<3{print $0;next}{print $0| "sort --version-sort"}')

EOF
        fi
        if [[ $namespace == "flux-system" ]]
        then
            cat <<EOF
$ kubectl get --namespace flux-system kustomizations ... # suspended
$(kubectl get --namespace flux-system kustomizations.kustomize.toolkit.fluxcd.io --output=json | jq --raw-output '.items[] | select(.spec.suspend == true) | .metadata.name')

$ kubectl get --all-namespaces helmreleases ... # suspended
$(kubectl get --all-namespaces helmreleases.helm.toolkit.fluxcd.io --output=json | jq --raw-output '.items[] | select(.spec.suspend == true) | .metadata.name'
tf-controller)

$ kubectl get --all-namespaces kustomizations.kustomize.toolkit.fluxcd.io
$(kubectl get --all-namespaces kustomizations.kustomize.toolkit.fluxcd.io)

$ kubectl get --all-namespaces helmreleases.helm.toolkit.fluxcd.io
$(kubectl get --all-namespaces helmreleases.helm.toolkit.fluxcd.io)

EOF
        fi
        cat <<EOF
$ kubectl get all --namespace "$namespace" -o wide
$(kubectl get all --namespace "$namespace" -o wide)

$ kubectl get ingress --namespace "$namespace" -o wide
$(kubectl get ingress --namespace "$namespace" -o wide)

$ kubectl get --namespace "$namespace" certificates -o wide
$(kubectl get --namespace "$namespace" certificates -o wide)

$ kubectl get secrets --namespace "$namespace" -o wide
$(kubectl get secrets --namespace "$namespace" -o wide)

$ kubectl get --namespace "$namespace" serviceaccounts
$(kubectl get --namespace "$namespace" serviceaccounts)

$ kubectl get pvc --namespace "$namespace" -o wide
$(kubectl get pvc --namespace "$namespace" -o wide)

$ kubectl get networkpolicies --namespace "$namespace" -o wide
$(kubectl get networkpolicies --namespace "$namespace" -o wide)

$ kubectl get events --namespace "$namespace" -o wide
$(kubectl get events --namespace "$namespace" -o wide)
EOF
    }
    export -f viddy_command
    viddy_args=(
        --no-title
        --interval "${KUBECTL_WATCH_INTERVAL:-10}"
    )
    # Upstream viddy does not have max-history flag.
    if [[ $(viddy --help) == *max-history* ]]
    then
        viddy_args+=("--max-history=${KUBECTL_WATCH_HISTORY:-10}")
    fi
    tmux rename-window "$namespace"
    viddy "${viddy_args[@]}" viddy_command
fi
