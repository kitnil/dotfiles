#!/bin/sh

cerb-auth()
{
    CERB_MAIL='pyhalov@majordomo.ru' CERB_PASS="$(pass show majordomo.ru/pyhalov)" $HOME/src/jord/cc.scm
}

guix-current-commit()
{
    guix describe --format=json \
        | jq --raw-output 'map(select(.name == "guix"))'[0].commit
}

find-not-current-user()
{
    find "$1" -not -user "$(getent passwd $USER | cut -d : -f 3)"
}

docker-export-archive()
{
    image="$1"
    host="$2"
    docker save "$image" | bzip2 | ssh "$host" 'bunzip2 | /home/user/.nix-profile/bin/docker load'
}

export GITLAB_API_PRIVATE_TOKEN="***REMOVED***"
export GITLAB_API_ENDPOINT="https://gitlab.wugi.info/api/v4"
export GITLAB_API_HTTPARTY_OPTIONS="{verify: false}"

gitlab-shell-create-project()
{
     gitlab create_project "$1" "{visibility: public}"
}

gitlab-shell-create-project-in-groups()
{
    name="$1"
    group="$2"
    gitlab create_project "$name" "{visibility: public, namespace_id: $group}"
    echo "https://gitlab.wugi.info/$group/$name"
    echo "git@gitlab.wugi.info:$group/$name.git"
}

ansible-playbook-fetch()
{
    ansible-playbook "$HOME/src/hello-ansible/fetch.yml"
}

jenkins()
{
    curl --user 'admin:***REMOVED***' \
         'http://localhost:30080/job/fiore/build?token=***REMOVED***'
}

jenkins-wip-guile()
{
    curl --user 'admin:***REMOVED***' \
         'http://localhost:30080/job/wip-guile/build?token=***REMOVED***'
}

bench-emacs()
{
    emacs --batch --eval '(message (emacs-init-time))'
}

emacs-znc()
{
    emacs --daemon=znc
}

emacsclient-znc()
{
    emacsclient --socket-name=znc
}

firefox-dark()
{
    firefox -p dark --new-instance --new-window 'http://zabbix.intr/' --new-window 'https://www.youtube.com/feed/subscriptions' --new-window 'https://www.youtube.com/watch?v=OqtK2Aq0nHo&list=RDMMOqtK2Aq0nHo&start_radio=1'
}

f() { guix environment --no-grafts -L ~/src/guix-wigust --pure libtcod --ad-hoc strace gdb findutils -- sh -c "cd /tmp/guix-build-libtcod-1.10.2-1.e7c4dbb.drv-$1; source /tmp/guix-build-libtcod-1.10.2-1.e7c4dbb.drv-$1/environment-variables; cd /tmp/guix-build-libtcod-1.10.2-1.e7c4dbb.drv-$1/source/build/autotools; ./configure;"; }

e() { guix environment --no-grafts -L ~/src/guix-wigust --pure libtcod --ad-hoc strace gdb findutils; }

docker-gc()
{
    # https://stackoverflow.com/questions/17236796/how-to-remove-old-docker-containers
    docker ps --filter "status=exited" | grep 'weeks ago' | awk '{ print $1 }' | xargs --no-run-if-empty docker rm
    # https://forums.docker.com/t/command-to-remove-all-unused-images/20/2
    docker images -q | xargs docker rmi
}

alias gnus='emc -e "(gnus)"'
alias magit-guix='emc -e "(let ((default-directory (expand-file-name \"~/src/guix\"))) (magit-status))"'
alias emms='emc -e "(emms)"'
alias elfeed='emc -e "(elfeed)"'


pre-build()
{
    sudo -E $HOME/src/guix/pre-inst-env \
         guix system build \
         --substitute-urls='http://cuirass.tld https://berlin.guixsd.org https://mirror.hydra.gnu.org' \
         -L $HOME/dotfiles/fiore/modules \
         $@
}

pre-reconfigure()
{
    sudo -E $HOME/src/guix/pre-inst-env \
         guix system reconfigure \
         --substitute-urls='http://cuirass.tld https://berlin.guixsd.org https://mirror.hydra.gnu.org' \
         -L $HOME/dotfiles/fiore/modules \
         $@
}

pre-weather()
{
    $HOME/src/guix/pre-inst-env \
        guix weather \
        --substitute-urls='http://cuirass.tld https://berlin.guixsd.org https://mirror.hydra.gnu.org' \
        $@
}

firefox-run()
{
    GTK_THEME=Adwaita:dark firefox -P default --new-instance;
}

stumpish-restore-rules()
{
    echo '(restore-window-placement-rules "~/.stumpwm.d/rules/4.lisp")' | stumpish -e eval
}

esxi()
{
    echo 192.168.125.22 \
         192.168.125.21 \
         192.168.125.14 \
         192.168.125.13 \
         192.168.125.12 \
         192.168.125.11
}

guix-package-show()
{
    guix package --search="$1" | recsel -e "name=\"$1\""
}

pre-guix-package-show()
{
    ./pre-inst-env guix package --search="$1" | recsel -e "name=\"$1\""
}

setfont-big()
{
    setfont ~/.guix-profile/share/consolefonts/Uni3-Terminus32x16.psf.gz
}

build-guix()
{
    guix environment --substitute-urls='https://ci.guix.info http://cuirass.tld' --manifest="$HOME/src/dotfiles/fiore/manifests/natsu-manifest.scm" -- sh -c 'exit' && guix system --substitute-urls='https://ci.guix.info http://cuirass.tld' --load-path="$HOME/src/dotfiles/fiore/modules" build "$HOME/src/dotfiles/guixsd/config.scm"
}

alerta-send-info()
{
    alerta send -r guixsd -e bash.tmp -E Production -S 'Linux servers' -s informational -t "$1" -v ERROR
}

alias guix-pull="guix pull --substitute-urls='https://ci.guix.info http://cuirass.tld'"

mozilla-sync()
{
    cp "$HOME/.mozilla/firefox/t4desxpx.light/chrome/userChrome.css" "/tmp/userChrome.css"
    rsync --verbose --delete --recursive \
          "$HOME/.mozilla/firefox/j56dvo43.default-1520714705340/" \
          "$HOME/.mozilla/firefox/t4desxpx.light/"
    mkdir "$HOME/.mozilla/firefox/t4desxpx.light/chrome/"
    mv "/tmp/userChrome.css" "$HOME/.mozilla/firefox/t4desxpx.light/chrome/userChrome.css"
}

guix-update-all()
{
    guix pull --substitute-urls='https://ci.guix.info http://cuirass.tld' && \
        sudo -i guix pull --substitute-urls='https://ci.guix.info http://cuirass.tld' && \
        guix package --substitute-urls='https://ci.guix.info http://cuirass.tld' --manifest="$HOME/src/dotfiles/fiore/manifests/natsu-manifest.scm" && \
        sudo -i guix system reconfigure --substitute-urls='https://ci.guix.info http://cuirass.tld' /home/oleg/src/dotfiles/guixsd/config.scm
}

append-youtube-channel()
{
    cat <<EOF >> /srv/data/youtube.scm

(define-public $1
  "https://www.youtube.com/channel/$2")
EOF
}

wallpaper-guixsd()
{
    feh \
        --bg-fill path/l "$HOME/Pictures/Wallpapers/guixsd-1920x1080.png" \
        --bg-fill path/r "$HOME/Pictures/Wallpapers/guixsd-1920x1080-greyscale.png"
}

backup-exclude()
{
    restic -r /srv/backup/guixsd \
           -e "$HOME/Downloads/2017-02-24-15-img" \
           -e "$HOME/vm" \
           -e "$HOME/.cache" \
           -e "$HOME/Downloads" \
           -e "$HOME/GNS3/images" \
           -e "$HOME/GNS3/projects"  \
           -e "$HOME/src/replicant" \
           backup /home/oleg $@
}

berlin()
{
    index="cuirass"
    for pkg in $("$HOME/src/guix/pre-inst-env" mypkgs); do
        echo -e "\n\n@ $pkg"
        curl -s "https://ci.guix.info/api/latestbuilds?nr=64&job=$pkg.x86_64-linux" \
            | jq -c ".[] | { index: { \"_index\": \"$index\", \"_type\": \"_doc\", _id: .id }}, ." \
            | curl -H "Content-Type: application/json" -XPOST 192.168.105.120:9200/_bulk --data-binary @-;
    done
}

sudo-psql()
{
    sudo -u postgres PSQL_HISTORY=/tmp/.psql_history PAGER="$(guix build less)/bin/less -S" $(guix build postgresql)/bin/psql
}

alias docker-stats-all="docker ps -q | xargs docker stats --no-stream"

export AWX_KEY='***REMOVED***'

# awx-goaccess()
# {
#     curl 'http://127.0.0.1:8052/' \
#          -H 'Authorization: Bearer ***REMOVED***' \
#          -H 'Content-Type: application/json;charset=utf-8' \
#          --data "{\"extra_vars\":{\"host_dest\":\"$host\",\"home\":\"$home\",\"site\":\"$site\"}}"
# }

display-configure()
{
    xrandr --output HDMI3 --right-of HDMI1
}

run-stumpwm()
{
    DISPLAY=:4 rlwrap sbcl --load /home/oleg/bin/my-stumpwm
}
mpv-youtube-music() { mpv --audio-device=pulse/alsa_output.usb-Logitech_Logitech_USB_Headset-00.analog-stereo --no-resume-playback 'https://www.youtube.com/playlist?list=PLmjgicsUWIkvEKkLN01vm85neXAik3yU2' ; }

guix-gcroot-ansible() { guix package --profile="$HOME/.config/guix/profiles/ansible" --substitute-urls='https://ci.guix.info http://cuirass.tld' -i python ; }

save-manifest() { GUIX_PACKAGE_PATH="$HOME/src/guix-wigust" guix environment --root="$HOME/.config/guix/gcroots/my-manifest" --substitute-urls='https://ci.guix.info http://cuirass.tld' --manifest="$HOME/src/dotfiles/fiore/manifests/natsu-manifest.scm" -- sh -c 'exit' ; }

screen-off()
{
    xrandr --output HDMI3 --off
}

screen-on()
{
    xrandr --output HDMI3 --auto
    xrandr --output HDMI3 --right-of HDMI1
}

windows-10()
{
    qemu-system-x86_64 -smp cores=4,threads=1 -m 4096 -enable-kvm -cpu host -daemonize -vnc :6 /srv/virt/win10-mail.qcow2
}
