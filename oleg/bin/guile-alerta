#!/bin/sh
# -*- scheme -*-
exec ${GUILE:-$(which guile)} $GUILE_FLAGS --no-auto-compile -e '(@@ (guile-alerta) main)' -s "$0" "$@"
!#

;;;; Guile Alerta --- Alerta WEB client
;;;; Copyright Â© 2019 Oleg Pykhalov <go.wigust@gmail.com>
;;;; Released under the GNU GPLv3 or any later version.

(define-module (guile-alerta)
  #:use-module (ice-9 format)
  #:use-module (ice-9 match)
  #:use-module (json)
  #:use-module (rnrs bytevectors)
  #:use-module (srfi srfi-1)
  #:use-module (srfi srfi-11)
  #:use-module (srfi srfi-19)
  #:use-module (srfi srfi-26)
  #:use-module (srfi srfi-37)
  #:use-module (srfi srfi-9)
  #:use-module (guix import utils)
  #:use-module (web client))

;;; Commentary:
;;;
;;; This script provides functions to send information to Alerta.
;;;
;;; Code:

(define %alerta-key
  (getenv "ALERTA_KEY"))

(define %options
  (let ((display-and-exit-proc (lambda (msg)
                                 (lambda (opt name arg loads)
                                   (display msg) (quit)))))
    (list (option '(#\v "version") #f #f
                  (display-and-exit-proc "guile-alerta version 0.0.1\n"))
          (option '(#\r "result") #f #t
                  (lambda (opt name arg loads)
                    (alist-cons 'result arg loads)))
          (option '(#\j "job") #f #t
                  (lambda (opt name arg loads)
                    (alist-cons 'job arg loads)))
          (option '(#\h "help") #f #f
                  (display-and-exit-proc
                   "Usage: guile-alerta ...")))))

(define %default-options
  '())

(define (main args)
  (define opts
    (args-fold (cdr (program-arguments))
               %options
               (lambda (opt name arg loads)
                 (error "Unrecognized option `~A'" name))
               (lambda (op loads)
                 (cons op loads))
               %default-options))
  
  (let ((job    (assoc-ref opts 'job))
        (result (assoc-ref opts 'result)))
    (let-values (((response body)
                  (http-post "https://alerta.wugi.info/api/alert"
                             #:headers `((content-type . (application/json))
                                         (Authorization . ,(format #f "Key ~a" %alerta-key)))
                             #:keep-alive? #t
                             #:body 
                             (scm->json-string `(("event" . ,(string-append "job." job))
                                                 ("severity" . ,(cond ((string=? result "success") "informational")
                                                                      ((string=? result "fail") "major")))
                                                 ("service" "ci")
                                                 ("environment" . "Production")
                                                 ("text" . ,(format #f "~a job log on https://jenkins.wugi.info/job/fiore/lastBuild/console"
                                                                   job))
                                                 ("value" . ,(cond ((string=? result "success")
                                                                    (number->string 1))
                                                                   ((string=? result "fail")
                                                                    (number->string 0))))
                                                 ("resource" . "jenkins")
                                                 ,@(cond ((string=? result "success")
                                                          '((timeout . 1800)))
                                                         ((string=? result "fail")
                                                          '())))))))
      (hash-table->alist (json-string->scm (utf8->string body))))))

;;; guile-foo ends here
