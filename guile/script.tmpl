#!`(executable-find "sh")`
# -*- scheme -*-
exec \${GUILE:-\$(which guile)} $GUILE_FLAGS -e '(@@ (`(s-chop-prefix "guile-" (file-name-nondirectory (buffer-file-name)))`) main)' -s "\$0" "$@"
!#

;;;; `(s-chop-prefix "guile-" (file-name-nondirectory (buffer-file-name)))` --- SYNOPSIS
;;;; Copyright Â© `(nth 5 (decode-time))` `user-full-name` <`user-mail-address`>
;;;; Released under the GNU GPLv3 or any later version.

(define-module (`(s-chop-prefix "guile-" (file-name-nondirectory (buffer-file-name)))`)
  #:use-module (srfi srfi-37))

;;; Commentary:
;;;
;;; DESCRIPTION
;;;
;;; Code:

(define %options
  (let ((display-and-exit-proc (lambda (msg)
                                 (lambda (opt name arg loads)
                                   (display msg) (quit)))))
    (list (option '(#\v "version") #f #f
                  (display-and-exit-proc "`(file-name-nondirectory (buffer-file-name))` version 0.0.1\n"))
          (option '(#\h "help") #f #f
                  (display-and-exit-proc
                   "Usage: `(file-name-nondirectory (buffer-file-name))` ...")))))

(define %default-options
  '())

(define (main args)
  (define opts
    (args-fold (cdr (program-arguments))
               %options
               (lambda (opt name arg loads)
                 (error "Unrecognized option \`~A'" name))
               (lambda (op loads)
                 (cons op loads))
               %default-options)))

;;; `(file-name-nondirectory (buffer-file-name))` ends here
