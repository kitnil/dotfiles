(define-module (sysadmin telegraf)
  #:use-module (ice-9 match)
  #:export (default-tegelegraf-config telegraf-configuration))

(define* (default-tegelegraf-config #:key host-name)
  '((global-tags)
    (agent
     (interval "10s")
     (round-interval #t)
     (metric-batch-size 1000)
     (metric-buffer-limit 10000)
     (collection-jitter "0s")
     (flush-interval "10s")
     (flush-jitter "0s")
     (precision "")
     (debug #f)
     (quiet #f)
     (logfile "")
     (hostname "")
     (omit-hostname #f))
    ((outputs-influxdb))
    ((inputs-cpu)
     (percpu #t)
     (totalcpu #t)
     (collect-cpu-time #f)
     (report-active #f))
    ((inputs-disk)
     (ignore-fs ("tmpfs" "devtmpfs" "devfs" "overlay" "aufs" "squashfs")))
    ((inputs-diskio))
    ((inputs-kernel))
    ((inputs-mem))
    ((inputs-processes))
    ((inputs-swap))
    ((inputs-system))))

(define (telegraf-configuration config)
  (define (symbol-substitute string char1 string1)
    (string->symbol
     (string-join (string-split (symbol->string string) char1) string1)))

  (define (uglify-field field)
    (symbol-substitute field #\- "_"))

  (define (uglify-h2 h2)
    (symbol-substitute h2 #\- "."))

  (define (format-fv fields values)
    (for-each (lambda (field value)
                (format #t "  ~a = ~a~%"
                        (uglify-field field)
                        (match value
                          ((? string? string)
                           (format #f "~s" string))
                          ((? boolean? boolean)
                           (if boolean "true" "false"))
                          ((values ...)
                           (format #f "[~a]" (string-join (map (lambda (value)
                                                                 (format #f "~s" value))
                                                               values)
                                                          ", ")))
                          (value value))))
              fields values))

  (for-each (match-lambda
              (((h2))
               (format #t "[[~a]]~%" (uglify-h2 h2)))
              (((h2)
                (fields values) ...)
               (format #t "[[~a]]~%" (uglify-h2 h2))
               (format-fv fields values))
              ((h1)
               (format #t "[~a]~%" (uglify-field h1)))
              ((h1
                (fields values) ...)
               (format #t "[~a]~%" (uglify-field h1))
               (format-fv fields values))
              (_ #f))
            config))
