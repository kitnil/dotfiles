From 205098f366878956ae2ef79a7e6121b08c1f1cc1 Mon Sep 17 00:00:00 2001
From: Oleg Pykhalov <go.wigust@gmail.com>
Date: Sun, 29 Sep 2024 22:51:11 +0300
Subject: [PATCH] src: obs-ndi-source: Add additional latency mode with obs
 buffering still

---
 src/obs-ndi-source.cpp | 26 ++++++++++++++++----------
 1 file changed, 16 insertions(+), 10 deletions(-)

diff --git a/src/obs-ndi-source.cpp b/src/obs-ndi-source.cpp
index 631198f..db5699d 100644
--- a/src/obs-ndi-source.cpp
+++ b/src/obs-ndi-source.cpp
@@ -57,6 +57,7 @@ with this program. If not, see <https://www.gnu.org/licenses/>
 
 #define PROP_LATENCY_NORMAL 0
 #define PROP_LATENCY_LOW 1
+#define PROP_LATENCY_LOWEST 2
 
 extern NDIlib_find_instance_t ndi_finder;
 
@@ -278,6 +279,10 @@ obs_properties_t *ndi_source_getproperties(void *data)
 		latency_modes,
 		obs_module_text("NDIPlugin.SourceProps.Latency.Low"),
 		PROP_LATENCY_LOW);
+        obs_property_list_add_int(
+                                  latency_modes,
+                                  obs_module_text("NDIPlugin.SourceProps.Latency.Lowest"),
+                                  PROP_LATENCY_LOWEST);
 
 	obs_properties_add_bool(props, PROP_AUDIO,
 				obs_module_text("NDIPlugin.SourceProps.Audio"));
@@ -356,15 +361,11 @@ void *ndi_source_poll_audio_video(void *data)
 
 				switch (s->sync_mode) {
 				case PROP_SYNC_NDI_TIMESTAMP:
-					obs_audio_frame.timestamp =
-						(uint64_t)(audio_frame.timestamp *
-							   100);
+                                  obs_audio_frame.timestamp = (uint64_t)(audio_frame.timestamp * 100);
 					break;
 
 				case PROP_SYNC_NDI_SOURCE_TIMECODE:
-					obs_audio_frame.timestamp =
-						(uint64_t)(audio_frame.timecode *
-							   100);
+                                  obs_audio_frame.timestamp = (uint64_t)(audio_frame.timecode * 100);
 					break;
 				}
 
@@ -496,7 +497,10 @@ void ndi_source_update(void *data, obs_data_t *settings)
 	recv_desc.source_to_connect_to.p_ndi_name =
 		obs_data_get_string(settings, PROP_SOURCE);
 	recv_desc.allow_video_fields = true;
-	recv_desc.color_format = NDIlib_recv_color_format_UYVY_BGRA;
+        if (obs_data_get_int(settings, PROP_LATENCY) == PROP_LATENCY_NORMAL)
+          recv_desc.color_format = NDIlib_recv_color_format_UYVY_BGRA;
+        else
+          recv_desc.color_format = NDIlib_recv_color_format_fastest;
 
 	switch (obs_data_get_int(settings, PROP_BANDWIDTH)) {
 	case PROP_BW_HIGHEST:
@@ -526,9 +530,8 @@ void ndi_source_update(void *data, obs_data_t *settings)
 	s->yuv_colorspace = prop_to_colorspace(
 		(int)obs_data_get_int(settings, PROP_YUV_COLORSPACE));
 
-	const bool is_unbuffered =
-		(obs_data_get_int(settings, PROP_LATENCY) == PROP_LATENCY_LOW);
-	obs_source_set_async_unbuffered(s->source, is_unbuffered);
+        // disable OBS buffering only for "Lowest" latency mode
+        obs_source_set_async_unbuffered(s->source, true);
 
 	s->audio_enabled = obs_data_get_bool(settings, PROP_AUDIO);
 
-- 
2.41.0

