// ‘M-x reinit’ to reload a config.

// Search engines
// Origin <http://conkeror.org/Webjumps>.

define_webjump("startpage", "https://www.startpage.com/do/search",
    $post_data = [["query", "%s"], ["cat", "web"],
                  ["cmd", "process_search"], ["language", "english"],
                  ["engine0", "v1all"], ["abp", "-1"]]);

define_webjump("youtube",
               "https://www.youtube.com/results?search_query=%s&search=Search");

define_webjump("youtube-latest",
               "https://www.youtube.com/results?sp=CAJQFA%253D%253D&search_query=%s")

define_webjump("github",
               "https://github.com/search?ref=simplesearch&q=%s")

// Minimal font size
// session_pref("font.minimum-size.x-western", 18);

// Search color
// Code from <https://www.freelists.org/post/conkeror/Changing-the-way-search-text-is-highlighted>.
// Discussion about color inversion <http://forums.mozillazine.org/viewtopic.php?f=38&t=1331845&start=15>.
user_pref("ui.textSelectBackgroundDisabled", "#40e0d0");
user_pref("ui.textSelectBackground", "#87ceeb");
user_pref("ui.textSelectBackgroundAttention", "#87ceeb");

// 
//
// History
//

define_browser_object_class(
    "history-url", null, 
    function (I, prompt) {
        check_buffer (I.buffer, content_buffer);
        var result = yield I.buffer.window.minibuffer.read_url(
            $prompt = prompt,  $use_webjumps = false, $use_history = true, $use_bookmarks = false);
        yield co_return (result);
    });

interactive("find-url-from-history",
            "Find a page from history in the current buffer",
            "find-url",
            $browser_object = browser_object_history_url);

interactive("find-url-from-history-new-buffer",
            "Find a page from history in a new buffer",
            "find-url-new-buffer",
            $browser_object = browser_object_history_url);

define_key(content_buffer_normal_keymap, "h", "find-url-from-history-new-buffer");
define_key(content_buffer_normal_keymap, "H", "find-url-from-history");

// 
// 
// http://conkeror.org/Tips
// 

// Ask before closing the window
add_hook("window_before_close_hook",
         function () {
             var w = get_recent_conkeror_window();
             var result = (w == null) ||
                 "y" == (yield w.minibuffer.read_single_character_option(
                     $prompt = "Quit Conkeror? (y/n)",
                     $options = ["y", "n"]));
             yield co_return(result);
         });

// Big Hint Numbers
register_user_stylesheet(
    "data:text/css," +
        escape(
            "@namespace url(\"http://www.w3.org/1999/xhtml\");\n" +
            "span.__conkeror_hint {\n"+
            "  font-size: 18px !important;\n"+
            "  line-height: 18px !important;\n"+
            "}"));

// Revive buffer (Undo closed tab)
define_key(default_global_keymap, "C-T", "revive-buffer");

var kill_buffer_original = kill_buffer_original || kill_buffer;

var killed_buffer_urls = [];
var killed_buffer_histories = [];

//  remember_killed_buffer
kill_buffer = function (buffer, force) {
    var hist = buffer.web_navigation.sessionHistory;

    if (buffer.display_uri_string && hist) {
        killed_buffer_histories.push(hist);
        killed_buffer_urls.push(buffer.display_uri_string);
    }

    kill_buffer_original(buffer,force);
};

interactive("revive-buffer",
    "Loads url from a previously killed buffer",
    function restore_killed_buffer (I) {
        if (killed_buffer_urls.length !== 0) {
            var url = yield I.minibuffer.read(
                $prompt = "Restore killed url:",
                $completer = new all_word_completer($completions = killed_buffer_urls),
                $default_completion = killed_buffer_urls[killed_buffer_urls.length - 1],
                $auto_complete = "url",
                $auto_complete_initial = true,
                $auto_complete_delay = 0,
                $require_match = true);

            var window = I.window;
            var creator = buffer_creator(content_buffer);
            var idx = killed_buffer_urls.indexOf(url);

            // Create the buffer
            var buf = creator(window, null);

            // Recover the history
            buf.web_navigation.sessionHistory = killed_buffer_histories[idx];

            // This line may seem redundant, but it's necessary.
            var original_index = buf.web_navigation.sessionHistory.index;
            buf.web_navigation.gotoIndex(original_index);

            // Focus the new tab
            window.buffers.current = buf;

            // Remove revived from cemitery
            killed_buffer_urls.splice(idx,1);
            killed_buffer_histories.splice(idx,1);
        } else {
            I.window.minibuffer.message("No killed buffer urls");
        }
    });


// Make each page's title available to copy to the clipboard
define_browser_object_class(
    "page-title", "Get the title of the current page",
    function (I, prompt) {
        check_buffer(I.buffer, content_buffer);
        yield co_return(I.buffer.document.title);
    });

define_key(content_buffer_normal_keymap, "* p", "browser-object-page-title");
// So `* p c` will copy the title of the current buffer


// Open Middle-Clicked Links in New Buffers
require("clicks-in-new-buffer.js");

// You can control whether buffers are created in the foreground or
// background (foreground is default).
//
// Set to either OPEN_NEW_BUFFER or OPEN_NEW_BUFFER_BACKGROUND
clicks_in_new_buffer_target = OPEN_NEW_BUFFER_BACKGROUND; // Now buffers open in background.

// You can control the mouse button which triggers buffer creation
//
// (middle is default).
// Set to 0 = left mouse, 1 = middle mouse, 2 = right mouse
clicks_in_new_buffer_button = 2; //  Now right mouse follows links in new buffers.


interactive("browse-buffer-history",
            "Browse the session history for the current buffer",
            function browse_buffer_history (I) {
                var b = check_buffer(I.buffer, content_buffer);
                var history = b.web_navigation.sessionHistory;

                if (history.count > 1) {
                    var entries = [];

                    for(var i = 0 ; i < history.count ; i += 1) {
                        entries[i] = history.getEntryAtIndex(i, false).URI.spec;
                    }

                    var url = yield I.minibuffer.read(
                        $prompt = "Go back or forward to:",
                        $completer = new all_word_completer($completions = entries),
                        $default_completion = history.index > 0 ? entries[history.index - 1] : entries[history.index + 1],
                        $auto_complete = "url",
                        $auto_complete_initial = true,
                        $auto_complete_delay = 0,
                        $require_match = true);

                    b.web_navigation.gotoIndex(entries.indexOf(url));
                } else {
                    I.window.minibuffer.message("No history");
                }
            });

interactive("mpv-on-url",
    "Run a mpv command on the url of a browser object.",
    function (I) {
        var cwd = I.local.cwd;
        var element = yield read_browser_object(I);
        var spec = load_spec(element);
        var uri = load_spec_uri_string(spec);
        // yield browser_element_shell_command(I.buffer, element, "mpv", cwd);
        shell_command_with_argument_blind("mpv --volume=50", uri, $cwd = cwd);
    },
    $browser_object = browser_object_links,
    $prompt = "mpv command");

interactive("eww-on-url",
    "Run a eww (inside Emacs) command on the url of a browser object.",
    function (I) {
        var cwd = I.local.cwd;
        var element = yield read_browser_object(I);
        var spec = load_spec(element);
        var uri = load_spec_uri_string(spec);
        // yield browser_element_shell_command(I.buffer, element, "mpv", cwd);
        shell_command_with_argument_blind("/home/natsu/bin/eww", uri, $cwd = cwd);
    },
    $browser_object = browser_object_links,
    $prompt = "eww command");


interactive("emacs-wget-on-url",
    "Run a wi-wget-switch (inside Emacs) command on the url of a browser object.",
    function (I) {
        var cwd = I.local.cwd;
        var element = yield read_browser_object(I);
        var spec = load_spec(element);
        var uri = load_spec_uri_string(spec);
        // yield browser_element_shell_command(I.buffer, element, "mpv", cwd);
        shell_command_with_argument_blind("/home/natsu/bin/wi-emacs-wget",
                                          uri, $cwd = cwd);
    },
    $browser_object = browser_object_links,
    $prompt = "emacs wget command");

interactive("chromium-on-url",
    "Run a chromium command on the url of a browser object.",
    function (I) {
        var cwd = I.local.cwd;
        var element = yield read_browser_object(I);
        var spec = load_spec(element);
        var uri = load_spec_uri_string(spec);
        // yield browser_element_shell_command(I.buffer, element, "mpv", cwd);
        shell_command_with_argument_blind("chromium", uri, $cwd = cwd);
    },
    $browser_object = browser_object_links,
    $prompt = "chromium command");

define_key(content_buffer_normal_keymap, "f8", "mpv-on-url");
define_key(content_buffer_normal_keymap, "f7", "eww-on-url");
define_key(content_buffer_normal_keymap, "f6", "emacs-wget-on-url");
define_key(content_buffer_normal_keymap, "f5", "chromium-on-url");

// Origin <https://orgmode.org/worg/org-contrib/org-protocol.html>.

function org_store_link (url, title, window) {
    var cmd_str = 'emacsclient \"org-protocol://store-link'
        + '?url=' + url
        + '&title=' + title
        + "&template=L"
        + '\"';
    if (window != null) {
	window.minibuffer.message('Issuing ' + cmd_str);
    }
    shell_command_blind(cmd_str);
}

interactive("org-store-link", "Stores [[url][title]] as org link and copies url to emacs kill ring",
	    function (I) {
		org_store_link(encodeURIComponent(I.buffer.display_uri_string),
                               encodeURIComponent(I.buffer.document.title),
                               I.window);
	    });

// For org-capture (or org-remember — just exchange capture with remember)
function org_capture (url, title, selection, window) {
    var cmd_str = 'emacsclient \"org-protocol://capture'
        + "?url=" + url
        + "&title=" + title
        + "&body=" + selection
        + "&template=l"
        + '\"';
    if (window != null) {
	window.minibuffer.message('Issuing ' + cmd_str);
    }
    shell_command_blind(cmd_str);
}

interactive("org-capture",
            "Clip URL, title, and selection to capture via org-protocol",
	    function (I) {
		org_capture(encodeURIComponent(I.buffer.display_uri_string),
                            encodeURIComponent(I.buffer.document.title),
                            encodeURIComponent(I.buffer.top_frame.getSelection()),
                            I.window);
	    });

// M-x org-store-link and M-x org-capture (or remember). 

define_key(content_buffer_normal_keymap, "C-c c", "org-capture");
define_key(content_buffer_normal_keymap, "C-c l", "org-store-link");

// Origin <http://conkeror.org/Tips#Reload_pages_at_a_certain_interval>.

var ref;

interactive("interval-reload",
            "Reload current buffer every n minutes",
            function (I) {
                var b = I.buffer;
                var i = yield I.minibuffer.read($prompt="Interval (mm:ss)?");

                if (i.indexOf(":") != -1) {
                    mmss = i.split(":");
                    i = ((parseInt(mmss[0]) * 60) + parseInt(mmss[1])) * 1000;
                } else {
                    i = parseInt(i) * 1000;
                }

                ref = call_at_interval(function () {
                    reload(b);
                }, i);

                add_hook.call(b, "kill_buffer_hook", function() {
                    ref.cancel();
                });
            });

interactive("cancel-intervals", "Cancel all running interval reloads",
            function (I) {
                ref.cancel();
            });

define_mime_type_table("external_content_handlers",
    {
        "*": getenv("EDITOR"),
        text: { "*": getenv("EDITOR") },
        image: { "*": "feh" },
        video: { "*": "mpv" },
        audio: { "*": "mpv" },
        application: {
            pdf: "zathura",
            postscript: "zathura",
            "x-dvi": "zathura"
        }
    },
    "Structure associating MIME types and MIME type patterns with "+
    "the names of programs for handling those them.  The key \"*\" "+
    "is a pattern-matching symbol which matches anything.");

// Origin <https://github.com/ivoarch/.dot-org-files/blob/master/conkeror.org>
download_buffer_automatic_open_target=OPEN_NEW_BUFFER_BACKGROUND;

// Arch linux
define_webjump("arch-forums", "http://bbs.archlinux.org");
define_webjump("arch-wiki", "http://wiki.archlinux.org/index.php?search=%s");
define_webjump("arch-aur", "http://aur.archlinux.org/packages.php?O=0&K=%s");
define_webjump("arch-packages",
               "https://www.archlinux.org/packages/?sort=&q=%s&limit=50",
               $alternative="https://packages.archlinux.org");

// Questions
define_webjump("linux-questions","http://www.linuxquestions.org/questions/");
define_webjump("gmane", "http://gmane.org/find.php?list=%s");
define_webjump("hackernews", "http://searchyc.com/%s", $alternative = "http://news.ycombinator.com/");
define_webjump("stackoverflow",  "http://stackoverflow.com/search?q=%s", $alternative = "http://stackoverflow.com/");
define_webjump("superuser", "http://superuser.com/search?q=%s", $alternative = "http://superuser.com/");

// Emacs
define_webjump("emacswiki",
   "http://www.google.com/cse?cx=004774160799092323420%3A6-ff2s0o6yi"+
       "&q=%s&sa=Search&siteurl=emacswiki.org%2F",
   $alternative="http://www.emacswiki.org/"); // emacswiki
define_webjump("marmalade", "http://marmalade-repo.org/packages?q=%s"); // emacs marmalade repo

// Yandex
define_webjump("yandex", "http://yandex.com/yandsearch?text=%s"); // text
define_webjump("yandex-ru", "https://yandex.ru/yandsearch?text=%s"); // text ru
define_webjump("yimages", "http://images.yandex.com/yandsearch?text=%s"); // images
define_webjump("yimages-ru", "http://images.yandex.ru/yandsearch?text=%s"); // images ru
define_webjump("ytrans", "http://translate.yandex.com/?lang=en-es&text=%s"); // translate en -> es

// Kaldata
define_webjump("kaldata",
    "http://www.kaldata.com/forums/index.php?app=core&module=search&do=search&fromMainBar=1&search_term=%s");

// Distrowatch (Search Distributions)
define_webjump("distrowatch", "http://distrowatch.com/table.php?distribution=%s");

// Google
define_webjump("trans", "http://translate.google.com/translate_t#auto|en|%s");

// Popular
define_webjump("wordpress", "http://wordpress.org/search/%s");
define_webjump("deviantart", "http://browse.deviantart.com/?q=%s", $alternative="http://www.deviantart.com");
define_webjump("flickr", "http://www.flickr.com/search/?q=%s", $alternative="http://www.flickr.com");

// GIT
define_webjump("savannah", "https://savannah.gnu.org/search/?words=%s&type_of_search=soft");
define_webjump("gitorious", "http://gitorious.org/search?q=%s");

// Lingvo
define_webjump("lingvo", "http://www.lingvo-online.ru/en/Translate/en-es/%s");

// Clear conkeror history.
function history_clear () {
    var history = Cc["@mozilla.org/browser/nav-history-service;1"]
        .getService(Ci.nsIBrowserHistory);
    history.removeAllPages();
}
interactive("history-clear", "Clear the history.", history_clear);

// User agent switcher.
// Origin <https://github.com/technomancy/dotfiles/blob/master/.conkerorrc>
var user_agents = { "conkeror": "Mozilla/5.0 (X11; Linux x86_64; rv:8.0.1) " +
                    "Gecko/20100101 conkeror/1.0pre",
                    "chromium": "Mozilla/5.0 (X11; U; Linux x86_64; en-US) " +
                    "AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.472.63" +
                    "Safari/534.3",
                    "firefox": "Mozilla/5.0 (X11; Linux x86_64; rv:8.0.1) " +
                    "Gecko/20100101 Firefox/8.0.1",
                    "android": "Mozilla/5.0 (Linux; U; Android 2.2; en-us; " +
                    "Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like " +
                    "Gecko) Version/4.0 Mobile Safari/533.1"};
  var agent_completer = prefix_completer($completions = Object.keys(user_agents));
 interactive("user-agent", "Pick a user agent from the list of presets",
            function(I) {
                var ua = (yield I.window.minibuffer.read(
                    $prompt = "Agent:",
                    $completer = agent_completer));
                set_user_agent(user_agents[ua]);
            });
